// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum MessageChannel {
  whatsapp_web
  cloud_api
}

model Franchise {
  id             Int       @id @default(autoincrement())
  name           String
  regNumber      String?   @db.VarChar(64)
  vatRegistered  Boolean   @default(false)
  vatNumber      String?   @db.VarChar(64)
  address        String?   @db.Text
  primaryContact Int?      // user id (optional)
  stores         Store[]
  entities       Entity[]
  users          User[]
  customers      Customer[]
  items          Item[]
  categories     Category[]
  taxRates       TaxRate[]
  inventories    Inventory[]
  receipts       Receipt[]
  invoices       Invoice[]
  payments       Payment[]
  bankTxns       BankTransaction[]
  employees      Employee[]
  dailyChecks    DailyCompliance[]
  messages       AIMessageLog[]

  @@index([name])
}

model Entity {
  id          Int       @id @default(autoincrement())
  franchiseId Int
  displayName String
  address     String?   @db.Text
  phone       String?   @db.VarChar(32)
  email       String?   @db.VarChar(191)
  vatNumber   String?   @db.VarChar(64)
  logoUrl     String?   @db.VarChar(512)
  franchise   Franchise @relation(fields: [franchiseId], references: [id])
  invoices    Invoice[]
}

model Store {
  id          Int          @id @default(autoincrement())
  franchiseId Int
  name        String
  code        String?      @db.VarChar(32)
  address     String?      @db.Text
  timezone    String?      @db.VarChar(64)
  franchise   Franchise    @relation(fields: [franchiseId], references: [id])
  receipts    Receipt[]
  inventories Inventory[]
  employees   Employee[]
  shifts      Shift[]
  dailyChecks DailyCompliance[]
  invoices    Invoice[]
  payments    Payment[]

  @@unique([franchiseId, code])
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique // super_user, owner, manager, admin, cashier, customer
  users UserRole[]
}

model User {
  id           Int        @id @default(autoincrement())
  franchiseId  Int?
  email        String?    @unique(map: "user_email_unique") @db.VarChar(191)
  phoneE164    String?    @unique(map: "user_phone_unique") @db.VarChar(32)
  passwordHash String?    @db.VarChar(255)
  status       Status     @default(ACTIVE)
  franchise    Franchise? @relation(fields: [franchiseId], references: [id])
  roles        UserRole[]
  auditLogs    AuditLog[]
  messages     AIMessageLog[] @relation("MessageCreatedBy")
}

model UserRole {
  userId      Int
  roleId      Int
  franchiseId Int?
  user        User @relation(fields: [userId], references: [id])
  role        Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId, franchiseId])
}

model Customer {
  id                  Int        @id @default(autoincrement())
  franchiseId         Int
  storeId             Int?
  loyverseCustomerId  String?    @unique(map: "loyv_customer_unique")
  name                String
  email               String?    @unique(map: "customer_email_unique") @db.VarChar(191)
  phoneE164           String?    @unique(map: "customer_phone_unique") @db.VarChar(32)
  status              Status     @default(ACTIVE)
  franchise           Franchise  @relation(fields: [franchiseId], references: [id])
  store               Store?     @relation(fields: [storeId], references: [id])
  receipts            Receipt[]
  invoices            Invoice[]
  payments            Payment[]
  messages            AIMessageLog[]

  @@index([franchiseId, storeId])
}

model Category {
  id          Int         @id @default(autoincrement())
  franchiseId Int
  name        String
  parentId    Int?
  franchise   Franchise   @relation(fields: [franchiseId], references: [id])
  items       Item[]
}

model TaxRate {
  id          Int        @id @default(autoincrement())
  franchiseId Int
  name        String
  rate        Decimal    @db.Decimal(5,4)
  activeFrom  DateTime?
  franchise   Franchise  @relation(fields: [franchiseId], references: [id])
  invoiceLines InvoiceLine[]
}

model Item {
  id             Int        @id @default(autoincrement())
  franchiseId    Int
  loyverseItemId String?    @unique
  sku            String?    @db.VarChar(64)
  name           String
  categoryId     Int?
  price          Decimal     @db.Decimal(10,2)
  franchise      Franchise   @relation(fields: [franchiseId], references: [id])
  category       Category?   @relation(fields: [categoryId], references: [id])
  receiptLines   ReceiptLine[]
  invoiceLines   InvoiceLine[]
  inventories    Inventory[]

  @@unique([franchiseId, sku])
}

model Inventory {
  id          Int       @id @default(autoincrement())
  franchiseId Int
  storeId     Int
  itemId      Int
  qtyOnHand   Decimal   @db.Decimal(12,3)
  updatedAt   DateTime  @updatedAt
  franchise   Franchise @relation(fields: [franchiseId], references: [id])
  store       Store     @relation(fields: [storeId], references: [id])
  item        Item      @relation(fields: [itemId], references: [id])

  @@unique([storeId, itemId])
}

model PaymentType {
  id          Int        @id @default(autoincrement())
  franchiseId Int
  name        String
  franchise   Franchise  @relation(fields: [franchiseId], references: [id])
  receipts    Receipt[]
  payments    Payment[]
}

model Receipt {
  id               Int         @id @default(autoincrement())
  franchiseId      Int
  storeId          Int
  loyverseReceiptId String     @unique
  customerId       Int?
  total            Decimal     @db.Decimal(10,2)
  paid             Decimal     @db.Decimal(10,2)
  paymentTypeId    Int?
  datetime         DateTime
  franchise        Franchise   @relation(fields: [franchiseId], references: [id])
  store            Store       @relation(fields: [storeId], references: [id])
  customer         Customer?   @relation(fields: [customerId], references: [id])
  paymentType      PaymentType? @relation(fields: [paymentTypeId], references: [id])
  lines            ReceiptLine[]
}

model ReceiptLine {
  id         Int     @id @default(autoincrement())
  receiptId  Int
  itemId     Int
  qty        Decimal @db.Decimal(12,3)
  unitPrice  Decimal @db.Decimal(10,2)
  lineTotal  Decimal @db.Decimal(10,2)
  receipt    Receipt @relation(fields: [receiptId], references: [id])
  item       Item    @relation(fields: [itemId], references: [id])
}

model Invoice {
  id          Int        @id @default(autoincrement())
  franchiseId Int
  storeId     Int?
  customerId  Int
  entityId    Int
  number      String     @unique
  status      String     @db.VarChar(32)
  subtotal    Decimal    @db.Decimal(10,2)
  taxTotal    Decimal    @db.Decimal(10,2)
  grandTotal  Decimal    @db.Decimal(10,2)
  issuedAt    DateTime
  dueAt       DateTime?
  franchise   Franchise  @relation(fields: [franchiseId], references: [id])
  store       Store?     @relation(fields: [storeId], references: [id])
  customer    Customer   @relation(fields: [customerId], references: [id])
  entity      Entity     @relation(fields: [entityId], references: [id])
  lines       InvoiceLine[]
  allocations PaymentAllocation[]
}

model InvoiceLine {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  itemId      Int?
  description String
  qty         Decimal  @db.Decimal(12,3)
  unitPrice   Decimal  @db.Decimal(10,2)
  taxRateId   Int?
  lineTotal   Decimal  @db.Decimal(10,2)
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  item        Item?    @relation(fields: [itemId], references: [id])
  taxRate     TaxRate? @relation(fields: [taxRateId], references: [id])
}

model Payment {
  id          Int        @id @default(autoincrement())
  franchiseId Int
  storeId     Int?
  customerId  Int
  amount      Decimal    @db.Decimal(10,2)
  method      String     @db.VarChar(64)
  receivedAt  DateTime
  reference   String?    @db.VarChar(128)
  franchise   Franchise  @relation(fields: [franchiseId], references: [id])
  store       Store?     @relation(fields: [storeId], references: [id])
  customer    Customer   @relation(fields: [customerId], references: [id])
  allocations PaymentAllocation[]
  bankMatches BankMatch[]
}

model PaymentAllocation {
  paymentId Int
  invoiceId Int
  amount    Decimal @db.Decimal(10,2)
  payment   Payment @relation(fields: [paymentId], references: [id])
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  @@id([paymentId, invoiceId])
}

model BankTransaction {
  id           Int        @id @default(autoincrement())
  franchiseId  Int
  accountName  String     @db.VarChar(128)
  txnDate      DateTime
  amount       Decimal    @db.Decimal(12,2)
  description  String?    @db.VarChar(512)
  reference    String?    @db.VarChar(128)
  rawPayload   Json
  franchise    Franchise  @relation(fields: [franchiseId], references: [id])
  matches      BankMatch[]

  @@index([franchiseId, txnDate])
}

model BankMatch {
  id                 Int             @id @default(autoincrement())
  bankTransactionId  Int
  paymentId          Int?
  invoiceId          Int?
  confidence         Decimal         @db.Decimal(5,4)
  matchedBy          String          @db.VarChar(32) // rule/manual
  bankTxn            BankTransaction @relation(fields: [bankTransactionId], references: [id])
  payment            Payment?        @relation(fields: [paymentId], references: [id])
  invoice            Invoice?        @relation(fields: [invoiceId], references: [id])
}

model Employee {
  id                 Int       @id @default(autoincrement())
  franchiseId        Int
  storeId            Int
  loyverseEmployeeId String?   @unique
  name               String
  email              String?   @db.VarChar(191)
  phoneE164          String?   @db.VarChar(32)
  franchise          Franchise @relation(fields: [franchiseId], references: [id])
  store              Store     @relation(fields: [storeId], references: [id])
  shifts             Shift[]
}

model Shift {
  id        Int      @id @default(autoincrement())
  employeeId Int
  storeId   Int
  start     DateTime
  end       DateTime?
  breakMin  Int?     @default(0)
  employee  Employee @relation(fields: [employeeId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
}

model DailyCompliance {
  id            Int       @id @default(autoincrement())
  franchiseId   Int
  storeId       Int
  date          DateTime
  submittedById Int
  cashCount     Decimal?  @db.Decimal(10,2)
  cleanlinessOk Boolean   @default(false)
  fridgesOk     Boolean   @default(false)
  tdsPoints     Json?
  notes         String?   @db.Text
  franchise     Franchise @relation(fields: [franchiseId], references: [id])
  store         Store     @relation(fields: [storeId], references: [id])
  submittedBy   User      @relation(fields: [submittedById], references: [id])
  photos        CompliancePhoto[]

  @@unique([storeId, date])
}

model CompliancePhoto {
  id                Int             @id @default(autoincrement())
  dailyComplianceId Int
  photoUrl          String          @db.VarChar(512)
  type              String?         @db.VarChar(64)
  takenAt           DateTime?
  dailyCompliance   DailyCompliance @relation(fields: [dailyComplianceId], references: [id])
}

model AIMessageLog {
  id           Int            @id @default(autoincrement())
  franchiseId  Int
  customerId   Int?
  type         String         @db.VarChar(64)
  messageText  String         @db.Text
  contextJson  Json?
  createdById  Int
  createdAt    DateTime       @default(now())
  sentVia      MessageChannel @default(whatsapp_web)
  franchise    Franchise      @relation(fields: [franchiseId], references: [id])
  customer     Customer?      @relation(fields: [customerId], references: [id])
  createdBy    User           @relation("MessageCreatedBy", fields: [createdById], references: [id])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String   @db.VarChar(64)
  resource   String   @db.VarChar(64)
  resourceId Int?
  beforeJson Json?
  afterJson  Json?
  ip         String?  @db.VarChar(64)
  ua         String?  @db.VarChar(255)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}
